#Beware of NAs
for (i in 1:9) alleles_existing_by_sp[sp,i]<- (sum((allele_cat[[i]])>0,na.rm=T))
#!!!RESULT!!!- HOW MANY ALLELES IN EACH CATEGORY
#proportion rare
alleles_existing_by_sp[,5]/alleles_existing_by_sp[,1]
#   cl <- makeCluster(24) # create a cluster with X cores
#   registerDoParallel(cl) # register the cluster
#########################################################
#--JUST BY SAMPLING NUMBER OF TREES 				  --#
#########################################################
summ_results_tree<-array(dim=c(nrow(Spp_genind@tab)-1,11,num_scen,num_reps))
for (nrep in 1:num_reps) {		#if not parallel comment IN
# temp<-foreach(nrep=1:num_reps) %dopar% {	#if not parallel comment OUT
alleles<-matrix(nrow=nrow(Spp_genind@tab)-1,ncol=length(allele_freqs))
#For number of rows minus one
for (t in 2:(nrow(Spp_genind@tab)-1)){
alleles<-colSums(Spp_genind@tab[sample(1:nrow(Spp_genind@tab), t+1),],na.rm=T)
for (l in 1:length(allele_cat)) summ_results_tree[(t),(l+2),scen,nrep]<-sum(alleles[allele_cat[[l]]]>0, na.rm=T)
}
# summ_results_tree[,,,nrep]	#if not parallel comment OUT
}
#summ_results_tree[,,1,]<-abind(temp,along=3)	#if not parallel comment OUT
save(summ_results_tree,file=paste("summ_results_tree",n_drop_file,".R",sep=""))
# stopCluster(cl)
#end of loop over species
}
this_species[[1]]
paste(this_species,"_wild_garden.gen",sep="")
for (sp in 1:length(species_names)){
this_species<-species_names[sp]
#	setwd(paste("C:/Users/shoban.DESKTOP-DLPV5IJ/Dropbox/Projects/IN_PROGRESS/Oak_popgen_analyses/",this_species,sep=""))
#	setwd(paste("C:/Users/shoban/Dropbox/Projects/IN_PROGRESS/Oak_popgen_analyses/",this_species,sep=""))
setwd("G:\\My Drive\\Hoban_Lab_Docs\\Projects\\Ten_Oaks\\DataFiles\\genind_files\\garden_wild")
Spp_genind<-read.genepop(paste(this_species,"_wild_garden.gen",sep=""),ncode=3);	print(table(Spp_genind@pop))
Spp_genpop<-genind2genpop(Spp_genind);	Spp_genind_sep<-seppop(Spp_genind)
#max_num_trees<-max_num_trees_vect[sp];
region_makeup<-region_makeup_list[[sp]]
#########################################3
n_pops<-length(levels(Spp_genind@pop))
n_total_indivs<- length(Spp_genind@tab[,1])
n_ind_p_pop<-table(Spp_genind@pop)
allele_freqs<-colSums(Spp_genpop@tab)/(n_total_indivs*2)
num_reps<-75000
list_allele_cat<-c("global","glob_v_com","glob_com","glob_lowfr","glob_rare","reg_rare","loc_com_d1","loc_com_d2","loc_rare")
#######################################################
#----DETERMINE WHAT ALLELES FALL IN WHAT CATEGORIES---#
#######################################################
allele_cat<-get.allele.cat(Spp_genpop, region_makeup, 2, n_ind_p_pop,n_drop=n_to_drop)
#glob; 	glob_v_com; 	glob_com;	glob_lowfr;		glob_rare
#reg_com_int;	loc_com_d1;		loc_com_d2;		loc_rare
#Beware of NAs
for (i in 1:9) alleles_existing_by_sp[sp,i]<- (sum((allele_cat[[i]])>0,na.rm=T))
#!!!RESULT!!!- HOW MANY ALLELES IN EACH CATEGORY
#proportion rare
alleles_existing_by_sp[,5]/alleles_existing_by_sp[,1]
#   cl <- makeCluster(24) # create a cluster with X cores
#   registerDoParallel(cl) # register the cluster
#########################################################
#--JUST BY SAMPLING NUMBER OF TREES 				  --#
#########################################################
summ_results_tree<-array(dim=c(nrow(Spp_genind@tab)-1,11,num_scen,num_reps))
for (nrep in 1:num_reps) {		#if not parallel comment IN
# temp<-foreach(nrep=1:num_reps) %dopar% {	#if not parallel comment OUT
alleles<-matrix(nrow=nrow(Spp_genind@tab)-1,ncol=length(allele_freqs))
#For number of rows minus one
for (t in 2:(nrow(Spp_genind@tab)-1)){
alleles<-colSums(Spp_genind@tab[sample(1:nrow(Spp_genind@tab), t+1),],na.rm=T)
for (l in 1:length(allele_cat)) summ_results_tree[(t),(l+2),scen,nrep]<-sum(alleles[allele_cat[[l]]]>0, na.rm=T)
}
# summ_results_tree[,,,nrep]	#if not parallel comment OUT
}
#summ_results_tree[,,1,]<-abind(temp,along=3)	#if not parallel comment OUT
save(summ_results_tree,file=paste("summ_results_tree",n_drop_file,".R",sep=""))
# stopCluster(cl)
#end of loop over species
}
for (sp in 1:length(species_names)){
this_species<-species_names[sp]
#	setwd(paste("C:/Users/shoban.DESKTOP-DLPV5IJ/Dropbox/Projects/IN_PROGRESS/Oak_popgen_analyses/",this_species,sep=""))
#	setwd(paste("C:/Users/shoban/Dropbox/Projects/IN_PROGRESS/Oak_popgen_analyses/",this_species,sep=""))
setwd("G:\\My Drive\\Hoban_Lab_Docs\\Projects\\Ten_Oaks\\DataFiles\\genind_files\\garden_wild")
Spp_genind<-read.genepop(paste(this_species,"_wild_garden.gen",sep=""),ncode=3);	print(table(Spp_genind@pop))
Spp_genpop<-genind2genpop(Spp_genind);	Spp_genind_sep<-seppop(Spp_genind)
#max_num_trees<-max_num_trees_vect[sp];
region_makeup<-region_makeup_list[[sp]]
#########################################3
n_pops<-length(levels(Spp_genind@pop))
n_total_indivs<- length(Spp_genind@tab[,1])
n_ind_p_pop<-table(Spp_genind@pop)
allele_freqs<-colSums(Spp_genpop@tab)/(n_total_indivs*2)
num_reps<-75000
list_allele_cat<-c("global","glob_v_com","glob_com","glob_lowfr","glob_rare","reg_rare","loc_com_d1","loc_com_d2","loc_rare")
#######################################################
#----DETERMINE WHAT ALLELES FALL IN WHAT CATEGORIES---#
#######################################################
# allele_cat<-get.allele.cat(Spp_genpop, region_makeup, 2, n_ind_p_pop,n_drop=n_to_drop)
allele_cat<-get.allele.cat(Spp_genpop, region_makeup, 2)
#glob; 	glob_v_com; 	glob_com;	glob_lowfr;		glob_rare
#reg_com_int;	loc_com_d1;		loc_com_d2;		loc_rare
#Beware of NAs
for (i in 1:9) alleles_existing_by_sp[sp,i]<- (sum((allele_cat[[i]])>0,na.rm=T))
#!!!RESULT!!!- HOW MANY ALLELES IN EACH CATEGORY
#proportion rare
alleles_existing_by_sp[,5]/alleles_existing_by_sp[,1]
#   cl <- makeCluster(24) # create a cluster with X cores
#   registerDoParallel(cl) # register the cluster
#########################################################
#--JUST BY SAMPLING NUMBER OF TREES 				  --#
#########################################################
summ_results_tree<-array(dim=c(nrow(Spp_genind@tab)-1,11,num_scen,num_reps))
for (nrep in 1:num_reps) {		#if not parallel comment IN
# temp<-foreach(nrep=1:num_reps) %dopar% {	#if not parallel comment OUT
alleles<-matrix(nrow=nrow(Spp_genind@tab)-1,ncol=length(allele_freqs))
#For number of rows minus one
for (t in 2:(nrow(Spp_genind@tab)-1)){
alleles<-colSums(Spp_genind@tab[sample(1:nrow(Spp_genind@tab), t+1),],na.rm=T)
for (l in 1:length(allele_cat)) summ_results_tree[(t),(l+2),scen,nrep]<-sum(alleles[allele_cat[[l]]]>0, na.rm=T)
}
# summ_results_tree[,,,nrep]	#if not parallel comment OUT
}
#summ_results_tree[,,1,]<-abind(temp,along=3)	#if not parallel comment OUT
save(summ_results_tree,file=paste("summ_results_tree",n_drop_file,".R",sep=""))
# stopCluster(cl)
#end of loop over species
}
for (sp in 1:length(species_names)){
this_species<-species_names[sp]
#	setwd(paste("C:/Users/shoban.DESKTOP-DLPV5IJ/Dropbox/Projects/IN_PROGRESS/Oak_popgen_analyses/",this_species,sep=""))
#	setwd(paste("C:/Users/shoban/Dropbox/Projects/IN_PROGRESS/Oak_popgen_analyses/",this_species,sep=""))
setwd("G:\\My Drive\\Hoban_Lab_Docs\\Projects\\Ten_Oaks\\DataFiles\\genind_files\\garden_wild")
Spp_genind<-read.genepop(paste(this_species,"_wild_garden.gen",sep=""),ncode=3);	print(table(Spp_genind@pop))
Spp_genpop<-genind2genpop(Spp_genind);	Spp_genind_sep<-seppop(Spp_genind)
#max_num_trees<-max_num_trees_vect[sp];
region_makeup<-region_makeup_list[[sp]]
#########################################3
n_pops<-length(levels(Spp_genind@pop))
n_total_indivs<- length(Spp_genind@tab[,1])
n_ind_p_pop<-table(Spp_genind@pop)
allele_freqs<-colSums(Spp_genpop@tab)/(n_total_indivs*2)
num_reps<-75000
list_allele_cat<-c("global","glob_v_com","glob_com","glob_lowfr","glob_rare","reg_rare","loc_com_d1","loc_com_d2","loc_rare")
#######################################################
#----DETERMINE WHAT ALLELES FALL IN WHAT CATEGORIES---#
#######################################################
# allele_cat<-get.allele.cat(Spp_genpop, region_makeup, 2, n_ind_p_pop,n_drop=n_to_drop)
allele_cat<-get.allele.cat(Spp_genpop, region_makeup, 2,n_ind_p_pop)
#glob; 	glob_v_com; 	glob_com;	glob_lowfr;		glob_rare
#reg_com_int;	loc_com_d1;		loc_com_d2;		loc_rare
#Beware of NAs
for (i in 1:9) alleles_existing_by_sp[sp,i]<- (sum((allele_cat[[i]])>0,na.rm=T))
#!!!RESULT!!!- HOW MANY ALLELES IN EACH CATEGORY
#proportion rare
alleles_existing_by_sp[,5]/alleles_existing_by_sp[,1]
#   cl <- makeCluster(24) # create a cluster with X cores
#   registerDoParallel(cl) # register the cluster
#########################################################
#--JUST BY SAMPLING NUMBER OF TREES 				  --#
#########################################################
summ_results_tree<-array(dim=c(nrow(Spp_genind@tab)-1,11,num_scen,num_reps))
for (nrep in 1:num_reps) {		#if not parallel comment IN
# temp<-foreach(nrep=1:num_reps) %dopar% {	#if not parallel comment OUT
alleles<-matrix(nrow=nrow(Spp_genind@tab)-1,ncol=length(allele_freqs))
#For number of rows minus one
for (t in 2:(nrow(Spp_genind@tab)-1)){
alleles<-colSums(Spp_genind@tab[sample(1:nrow(Spp_genind@tab), t+1),],na.rm=T)
for (l in 1:length(allele_cat)) summ_results_tree[(t),(l+2),scen,nrep]<-sum(alleles[allele_cat[[l]]]>0, na.rm=T)
}
# summ_results_tree[,,,nrep]	#if not parallel comment OUT
}
#summ_results_tree[,,1,]<-abind(temp,along=3)	#if not parallel comment OUT
save(summ_results_tree,file=paste("summ_results_tree",n_drop_file,".R",sep=""))
# stopCluster(cl)
#end of loop over species
}
region_makeup
region_makeup_list<-list(list(1:2),list(1:2),list(1:2),list(1:2))
region_makeup_list
region_makeup_list[[1]]
for (sp in 1:length(species_names)){
this_species<-species_names[sp]
#	setwd(paste("C:/Users/shoban.DESKTOP-DLPV5IJ/Dropbox/Projects/IN_PROGRESS/Oak_popgen_analyses/",this_species,sep=""))
#	setwd(paste("C:/Users/shoban/Dropbox/Projects/IN_PROGRESS/Oak_popgen_analyses/",this_species,sep=""))
setwd("G:\\My Drive\\Hoban_Lab_Docs\\Projects\\Ten_Oaks\\DataFiles\\genind_files\\garden_wild")
Spp_genind<-read.genepop(paste(this_species,"_wild_garden.gen",sep=""),ncode=3);	print(table(Spp_genind@pop))
Spp_genpop<-genind2genpop(Spp_genind);	Spp_genind_sep<-seppop(Spp_genind)
#max_num_trees<-max_num_trees_vect[sp];
region_makeup<-region_makeup_list[[sp]]
#########################################3
n_pops<-length(levels(Spp_genind@pop))
n_total_indivs<- length(Spp_genind@tab[,1])
n_ind_p_pop<-table(Spp_genind@pop)
allele_freqs<-colSums(Spp_genpop@tab)/(n_total_indivs*2)
num_reps<-75000
list_allele_cat<-c("global","glob_v_com","glob_com","glob_lowfr","glob_rare","reg_rare","loc_com_d1","loc_com_d2","loc_rare")
#######################################################
#----DETERMINE WHAT ALLELES FALL IN WHAT CATEGORIES---#
#######################################################
# allele_cat<-get.allele.cat(Spp_genpop, region_makeup, 2, n_ind_p_pop,n_drop=n_to_drop)
allele_cat<-get.allele.cat(Spp_genpop, region_makeup, 2,n_ind_p_pop)
#glob; 	glob_v_com; 	glob_com;	glob_lowfr;		glob_rare
#reg_com_int;	loc_com_d1;		loc_com_d2;		loc_rare
#Beware of NAs
for (i in 1:9) alleles_existing_by_sp[sp,i]<- (sum((allele_cat[[i]])>0,na.rm=T))
#!!!RESULT!!!- HOW MANY ALLELES IN EACH CATEGORY
#proportion rare
alleles_existing_by_sp[,5]/alleles_existing_by_sp[,1]
#   cl <- makeCluster(24) # create a cluster with X cores
#   registerDoParallel(cl) # register the cluster
#########################################################
#--JUST BY SAMPLING NUMBER OF TREES 				  --#
#########################################################
summ_results_tree<-array(dim=c(nrow(Spp_genind@tab)-1,11,num_scen,num_reps))
for (nrep in 1:num_reps) {		#if not parallel comment IN
# temp<-foreach(nrep=1:num_reps) %dopar% {	#if not parallel comment OUT
alleles<-matrix(nrow=nrow(Spp_genind@tab)-1,ncol=length(allele_freqs))
#For number of rows minus one
for (t in 2:(nrow(Spp_genind@tab)-1)){
alleles<-colSums(Spp_genind@tab[sample(1:nrow(Spp_genind@tab), t+1),],na.rm=T)
for (l in 1:length(allele_cat)) summ_results_tree[(t),(l+2),scen,nrep]<-sum(alleles[allele_cat[[l]]]>0, na.rm=T)
}
# summ_results_tree[,,,nrep]	#if not parallel comment OUT
}
#summ_results_tree[,,1,]<-abind(temp,along=3)	#if not parallel comment OUT
save(summ_results_tree,file=paste("summ_results_tree",n_drop_file,".R",sep=""))
# stopCluster(cl)
#end of loop over species
}
Spp_genind
allele_cat<-get.allele.cat(Spp_genpop, c(1:2), 2,n_ind_p_pop)
##functions
colMax <- function(data) sapply(data, max, na.rm = TRUE)
sample.pop<-function(genind_obj,vect_pop_ID,vect_samp_sizes){
p<-length(vect_pop_ID)
if (p>1) {
for (p in 1:length(vect_pop_ID))
alleles[p,]<-colSums(genind_obj[[vect_pop_ID[p]]]@tab[sample(1:nrow(genind_obj[[vect_pop_ID[p]]]@tab), vect_samp_sizes[p]),],na.rm=T)
alleles<-colSums(alleles)
} else {alleles<-colSums(genind_obj[[vect_pop_ID[p]]]@tab[sample(1:nrow(genind_obj[[vect_pop_ID[p]]]@tab), vect_samp_sizes[p]),],na.rm=T)}
alleles
}
allele_cat<-get.allele.cat(Spp_genpop, c(1:2), 2,n_ind_p_pop)
allele_cat
for (sp in 1:length(species_names)){
this_species<-species_names[sp]
#	setwd(paste("C:/Users/shoban.DESKTOP-DLPV5IJ/Dropbox/Projects/IN_PROGRESS/Oak_popgen_analyses/",this_species,sep=""))
#	setwd(paste("C:/Users/shoban/Dropbox/Projects/IN_PROGRESS/Oak_popgen_analyses/",this_species,sep=""))
setwd("G:\\My Drive\\Hoban_Lab_Docs\\Projects\\Ten_Oaks\\DataFiles\\genind_files\\garden_wild")
Spp_genind<-read.genepop(paste(this_species,"_wild_garden.gen",sep=""),ncode=3);	print(table(Spp_genind@pop))
Spp_genpop<-genind2genpop(Spp_genind);	Spp_genind_sep<-seppop(Spp_genind)
#max_num_trees<-max_num_trees_vect[sp];
region_makeup<-region_makeup_list[[sp]]
#########################################3
n_pops<-length(levels(Spp_genind@pop))
n_total_indivs<- length(Spp_genind@tab[,1])
n_ind_p_pop<-table(Spp_genind@pop)
allele_freqs<-colSums(Spp_genpop@tab)/(n_total_indivs*2)
num_reps<-75000
list_allele_cat<-c("global","glob_v_com","glob_com","glob_lowfr","glob_rare","reg_rare","loc_com_d1","loc_com_d2","loc_rare")
#######################################################
#----DETERMINE WHAT ALLELES FALL IN WHAT CATEGORIES---#
#######################################################
# allele_cat<-get.allele.cat(Spp_genpop, region_makeup, 2, n_ind_p_pop,n_drop=n_to_drop)
allele_cat<-get.allele.cat(Spp_genpop, region_makeup, 2,n_ind_p_pop)
#glob; 	glob_v_com; 	glob_com;	glob_lowfr;		glob_rare
#reg_com_int;	loc_com_d1;		loc_com_d2;		loc_rare
#Beware of NAs
for (i in 1:9) alleles_existing_by_sp[sp,i]<- (sum((allele_cat[[i]])>0,na.rm=T))
#!!!RESULT!!!- HOW MANY ALLELES IN EACH CATEGORY
#proportion rare
alleles_existing_by_sp[,5]/alleles_existing_by_sp[,1]
#   cl <- makeCluster(24) # create a cluster with X cores
#   registerDoParallel(cl) # register the cluster
#########################################################
#--JUST BY SAMPLING NUMBER OF TREES 				  --#
#########################################################
summ_results_tree<-array(dim=c(nrow(Spp_genind@tab)-1,11,num_scen,num_reps))
for (nrep in 1:num_reps) {		#if not parallel comment IN
# temp<-foreach(nrep=1:num_reps) %dopar% {	#if not parallel comment OUT
alleles<-matrix(nrow=nrow(Spp_genind@tab)-1,ncol=length(allele_freqs))
#For number of rows minus one
for (t in 2:(nrow(Spp_genind@tab)-1)){
alleles<-colSums(Spp_genind@tab[sample(1:nrow(Spp_genind@tab), t+1),],na.rm=T)
for (l in 1:length(allele_cat)) summ_results_tree[(t),(l+2),scen,nrep]<-sum(alleles[allele_cat[[l]]]>0, na.rm=T)
}
# summ_results_tree[,,,nrep]	#if not parallel comment OUT
}
#summ_results_tree[,,1,]<-abind(temp,along=3)	#if not parallel comment OUT
save(summ_results_tree,file=paste("summ_results_tree",n_drop_file,".R",sep=""))
# stopCluster(cl)
#end of loop over species
}
for (sp in 1:length(species_names)){
this_species<-species_names[sp]
#	setwd(paste("C:/Users/shoban.DESKTOP-DLPV5IJ/Dropbox/Projects/IN_PROGRESS/Oak_popgen_analyses/",this_species,sep=""))
#	setwd(paste("C:/Users/shoban/Dropbox/Projects/IN_PROGRESS/Oak_popgen_analyses/",this_species,sep=""))
setwd("G:\\My Drive\\Hoban_Lab_Docs\\Projects\\Ten_Oaks\\DataFiles\\genind_files\\garden_wild")
Spp_genind<-read.genepop(paste(this_species,"_wild_garden.gen",sep=""),ncode=3);	print(table(Spp_genind@pop))
Spp_genpop<-genind2genpop(Spp_genind);	Spp_genind_sep<-seppop(Spp_genind)
#max_num_trees<-max_num_trees_vect[sp];
region_makeup<-region_makeup_list[[sp]]
#########################################3
n_pops<-length(levels(Spp_genind@pop))
n_total_indivs<- length(Spp_genind@tab[,1])
n_ind_p_pop<-table(Spp_genind@pop)
allele_freqs<-colSums(Spp_genpop@tab)/(n_total_indivs*2)
num_reps<-75000
list_allele_cat<-c("global","glob_v_com","glob_com","glob_lowfr","glob_rare","reg_rare","loc_com_d1","loc_com_d2","loc_rare")
#######################################################
#----DETERMINE WHAT ALLELES FALL IN WHAT CATEGORIES---#
#######################################################
# allele_cat<-get.allele.cat(Spp_genpop, region_makeup, 2, n_ind_p_pop,n_drop=n_to_drop)
allele_cat<-get.allele.cat(Spp_genpop, c(1:2), 2,n_ind_p_pop)
#glob; 	glob_v_com; 	glob_com;	glob_lowfr;		glob_rare
#reg_com_int;	loc_com_d1;		loc_com_d2;		loc_rare
#Beware of NAs
for (i in 1:9) alleles_existing_by_sp[sp,i]<- (sum((allele_cat[[i]])>0,na.rm=T))
#!!!RESULT!!!- HOW MANY ALLELES IN EACH CATEGORY
#proportion rare
alleles_existing_by_sp[,5]/alleles_existing_by_sp[,1]
#   cl <- makeCluster(24) # create a cluster with X cores
#   registerDoParallel(cl) # register the cluster
#########################################################
#--JUST BY SAMPLING NUMBER OF TREES 				  --#
#########################################################
summ_results_tree<-array(dim=c(nrow(Spp_genind@tab)-1,11,num_scen,num_reps))
for (nrep in 1:num_reps) {		#if not parallel comment IN
# temp<-foreach(nrep=1:num_reps) %dopar% {	#if not parallel comment OUT
alleles<-matrix(nrow=nrow(Spp_genind@tab)-1,ncol=length(allele_freqs))
#For number of rows minus one
for (t in 2:(nrow(Spp_genind@tab)-1)){
alleles<-colSums(Spp_genind@tab[sample(1:nrow(Spp_genind@tab), t+1),],na.rm=T)
for (l in 1:length(allele_cat)) summ_results_tree[(t),(l+2),scen,nrep]<-sum(alleles[allele_cat[[l]]]>0, na.rm=T)
}
# summ_results_tree[,,,nrep]	#if not parallel comment OUT
}
#summ_results_tree[,,1,]<-abind(temp,along=3)	#if not parallel comment OUT
save(summ_results_tree,file=paste("summ_results_tree",n_drop_file,".R",sep=""))
# stopCluster(cl)
#end of loop over species
}
for (sp in 1:length(species_names)){
this_species<-species_names[sp]
#	setwd(paste("C:/Users/shoban.DESKTOP-DLPV5IJ/Dropbox/Projects/IN_PROGRESS/Oak_popgen_analyses/",this_species,sep=""))
#	setwd(paste("C:/Users/shoban/Dropbox/Projects/IN_PROGRESS/Oak_popgen_analyses/",this_species,sep=""))
setwd("G:\\My Drive\\Hoban_Lab_Docs\\Projects\\Ten_Oaks\\DataFiles\\genind_files\\garden_wild")
Spp_genind<-read.genepop(paste(this_species,"_wild_garden.gen",sep=""),ncode=3);	print(table(Spp_genind@pop))
Spp_genpop<-genind2genpop(Spp_genind);	Spp_genind_sep<-seppop(Spp_genind)
#max_num_trees<-max_num_trees_vect[sp];
region_makeup<-region_makeup_list[[sp]]
#########################################3
n_pops<-length(levels(Spp_genind@pop))
n_total_indivs<- length(Spp_genind@tab[,1])
n_ind_p_pop<-table(Spp_genind@pop)
allele_freqs<-colSums(Spp_genpop@tab)/(n_total_indivs*2)
# num_reps<-75000
list_allele_cat<-c("global","glob_v_com","glob_com","glob_lowfr","glob_rare","reg_rare","loc_com_d1","loc_com_d2","loc_rare")
#######################################################
#----DETERMINE WHAT ALLELES FALL IN WHAT CATEGORIES---#
#######################################################
# allele_cat<-get.allele.cat(Spp_genpop, region_makeup, 2, n_ind_p_pop,n_drop=n_to_drop)
allele_cat<-get.allele.cat(Spp_genpop, c(1:2), 2,n_ind_p_pop)
#glob; 	glob_v_com; 	glob_com;	glob_lowfr;		glob_rare
#reg_com_int;	loc_com_d1;		loc_com_d2;		loc_rare
#Beware of NAs
for (i in 1:9) alleles_existing_by_sp[sp,i]<- (sum((allele_cat[[i]])>0,na.rm=T))
#!!!RESULT!!!- HOW MANY ALLELES IN EACH CATEGORY
#proportion rare
alleles_existing_by_sp[,5]/alleles_existing_by_sp[,1]
#   cl <- makeCluster(24) # create a cluster with X cores
#   registerDoParallel(cl) # register the cluster
#########################################################
#--JUST BY SAMPLING NUMBER OF TREES 				  --#
#########################################################
#   summ_results_tree<-array(dim=c(nrow(Spp_genind@tab)-1,11,num_scen,num_reps))
# for (nrep in 1:num_reps) {		#if not parallel comment IN
# temp<-foreach(nrep=1:num_reps) %dopar% {	#if not parallel comment OUT
#   alleles<-matrix(nrow=nrow(Spp_genind@tab)-1,ncol=length(allele_freqs))
#For number of rows minus one
#   for (t in 2:(nrow(Spp_genind@tab)-1)){
#     alleles<-colSums(Spp_genind@tab[sample(1:nrow(Spp_genind@tab), t+1),],na.rm=T)
#    for (l in 1:length(allele_cat)) summ_results_tree[(t),(l+2),scen,nrep]<-sum(alleles[allele_cat[[l]]]>0, na.rm=T)
#   }
# summ_results_tree[,,,nrep]	#if not parallel comment OUT
#  }
#summ_results_tree[,,1,]<-abind(temp,along=3)	#if not parallel comment OUT
# save(summ_results_tree,file=paste("summ_results_tree",n_drop_file,".R",sep=""))
# stopCluster(cl)
#end of loop over species
}
alleles_existing_by_sp
wild_results
wild_results
allele_cat_tot
# species_names<-c("Hhannerae","Hwaimeae","Masheii","Mpyramidata","Pekmanii","Psargentii","Qboyntonii","Qgeorgiana","Qoglethorpensis","Zdecumbens","Zlucayana")
#  region_makeup_list<-list(list(1:2,3:4),list(1:2,3),list(1,2),list(1:2,3:4),list(1,2),list(1:2,3),list(1:2,3,4,5:9),list(1:2,3,4,5:10),list(1:2,3,4,5:8),list(1,2),list(1:2,3))
#   set_garden_p<-c(5,4,3,5,3,4,10,11,9,3,4)
wild_results<-matrix(nrow=length(species_names),ncol=9+1)
alleles_existing_by_sp<-matrix(nrow=length(species_names),ncol=9)
for (sp in 1:length(species_names)){
this_species<-species_names[sp]
setwd("G:\\My Drive\\Hoban_Lab_Docs\\Projects\\Ten_Oaks\\DataFiles\\genind_files\\garden_wild")
#setwd(paste("C:/Users/shoban/Dropbox/Projects/IN_PROGRESS/Oak_popgen_analyses/",this_species,sep=""))
#setwd(paste("/home/user/Dropbox/Projects/IN_PROGRESS/Oak_popgen_analyses/",this_species,sep=""))
Spp_tot_genind<-read.genepop(paste(this_species,"_wild_garden.gen",sep=""),ncode=3)
#This code compares the wild to various ex situ populations or all the ex situ merged
#Just put in garden and wild population numbers... currently all gardens are merged into one "population"
#  wild_p<-unlist(region_makeup_list[[sp]]); garden_p<-set_garden_p[sp]
n_ind_W<-table(Spp_tot_genind@pop)[wild_p];  n_ind_G<-table(Spp_tot_genind@pop)[garden_p];
Spp_tot_genpop<-genind2genpop(Spp_tot_genind)
Spp_tot_genind_sep<-seppop(Spp_tot_genind)
alleles_cap<-colSums(Spp_tot_genind_sep[[garden_p]]@tab,na.rm=T)
#Allele categories based only on wild populations (can look at all wild pop'ns or only one if you want)
allele_cat_tot<-get.allele.cat(Spp_tot_genpop[wild_p], region_makeup_list[[sp]], 2, n_ind_W, glob_only=F,n_drop=n_to_drop)
#This goes through each allele category and divides the number captured ex situ (alleles_cap) by the number of alleles existing (allele_cat_tot)
list_allele_cat<-c("global","glob_v_com","glob_com","glob_lowfr","glob_rare","reg_rare","loc_com_d1","loc_com_d2","loc_rare")
for (i in 1:9) alleles_existing_by_sp[sp,i]<- (sum((allele_cat_tot[[i]])>0,na.rm=T))
for (l in 1:length(allele_cat_tot)) wild_results[sp,l]<-round(sum(alleles_cap[allele_cat_tot[[l]]]>0)/length(allele_cat_tot[[l]]),4)
wild_results[sp,10]<-n_ind_G
}
paste(this_species,"_wild_garden.gen",sep="")
for (sp in 1:length(species_names)){
this_species<-species_names[sp]
setwd("G:\\My Drive\\Hoban_Lab_Docs\\Projects\\Ten_Oaks\\DataFiles\\genind_files\\garden_wild")
#setwd(paste("C:/Users/shoban/Dropbox/Projects/IN_PROGRESS/Oak_popgen_analyses/",this_species,sep=""))
#setwd(paste("/home/user/Dropbox/Projects/IN_PROGRESS/Oak_popgen_analyses/",this_species,sep=""))
Spp_tot_genind<-read.genepop(paste(this_species,"_wild_garden.gen",sep=""),ncode=3)
#This code compares the wild to various ex situ populations or all the ex situ merged
#Just put in garden and wild population numbers... currently all gardens are merged into one "population"
#  wild_p<-unlist(region_makeup_list[[sp]]); garden_p<-set_garden_p[sp]
n_ind_W<-table(Spp_tot_genind@pop)[wild_p];  n_ind_G<-table(Spp_tot_genind@pop)[garden_p];
Spp_tot_genpop<-genind2genpop(Spp_tot_genind)
Spp_tot_genind_sep<-seppop(Spp_tot_genind)
alleles_cap<-colSums(Spp_tot_genind_sep[[garden_p]]@tab,na.rm=T)
#Allele categories based only on wild populations (can look at all wild pop'ns or only one if you want)
allele_cat_tot<-get.allele.cat(Spp_tot_genpop[wild_p], region_makeup_list[[sp]], 2, n_ind_W, glob_only=F,n_drop=n_to_drop)
#This goes through each allele category and divides the number captured ex situ (alleles_cap) by the number of alleles existing (allele_cat_tot)
list_allele_cat<-c("global","glob_v_com","glob_com","glob_lowfr","glob_rare","reg_rare","loc_com_d1","loc_com_d2","loc_rare")
for (i in 1:9) alleles_existing_by_sp[sp,i]<- (sum((allele_cat_tot[[i]])>0,na.rm=T))
for (l in 1:length(allele_cat_tot)) wild_results[sp,l]<-round(sum(alleles_cap[allele_cat_tot[[l]]]>0)/length(allele_cat_tot[[l]]),4)
wild_results[sp,10]<-n_ind_G
}
# species_names<-c("Hhannerae","Hwaimeae","Masheii","Mpyramidata","Pekmanii","Psargentii","Qboyntonii","Qgeorgiana","Qoglethorpensis","Zdecumbens","Zlucayana")
#  region_makeup_list<-list(list(1:2,3:4),list(1:2,3),list(1,2),list(1:2,3:4),list(1,2),list(1:2,3),list(1:2,3,4,5:9),list(1:2,3,4,5:10),list(1:2,3,4,5:8),list(1,2),list(1:2,3))
set_garden_p<-c(2,2,2,2)
# species_names<-c("Hhannerae","Hwaimeae","Masheii","Mpyramidata","Pekmanii","Psargentii","Qboyntonii","Qgeorgiana","Qoglethorpensis","Zdecumbens","Zlucayana")
#  region_makeup_list<-list(list(1:2,3:4),list(1:2,3),list(1,2),list(1:2,3:4),list(1,2),list(1:2,3),list(1:2,3,4,5:9),list(1:2,3,4,5:10),list(1:2,3,4,5:8),list(1,2),list(1:2,3))
set_garden_p<-c(1,1,1,1)
for (sp in 1:length(species_names)){
this_species<-species_names[sp]
setwd("G:\\My Drive\\Hoban_Lab_Docs\\Projects\\Ten_Oaks\\DataFiles\\genind_files\\garden_wild")
#setwd(paste("C:/Users/shoban/Dropbox/Projects/IN_PROGRESS/Oak_popgen_analyses/",this_species,sep=""))
#setwd(paste("/home/user/Dropbox/Projects/IN_PROGRESS/Oak_popgen_analyses/",this_species,sep=""))
Spp_tot_genind<-read.genepop(paste(this_species,"_wild_garden.gen",sep=""),ncode=3)
#This code compares the wild to various ex situ populations or all the ex situ merged
#Just put in garden and wild population numbers... currently all gardens are merged into one "population"
wild_p<-list(2,2,2,2); garden_p<-set_garden_p[sp]
n_ind_W<-table(Spp_tot_genind@pop)[wild_p];  n_ind_G<-table(Spp_tot_genind@pop)[garden_p];
Spp_tot_genpop<-genind2genpop(Spp_tot_genind)
Spp_tot_genind_sep<-seppop(Spp_tot_genind)
alleles_cap<-colSums(Spp_tot_genind_sep[[garden_p]]@tab,na.rm=T)
#Allele categories based only on wild populations (can look at all wild pop'ns or only one if you want)
allele_cat_tot<-get.allele.cat(Spp_tot_genpop[wild_p], region_makeup_list[[sp]], 2, n_ind_W, glob_only=F,n_drop=n_to_drop)
#This goes through each allele category and divides the number captured ex situ (alleles_cap) by the number of alleles existing (allele_cat_tot)
list_allele_cat<-c("global","glob_v_com","glob_com","glob_lowfr","glob_rare","reg_rare","loc_com_d1","loc_com_d2","loc_rare")
for (i in 1:9) alleles_existing_by_sp[sp,i]<- (sum((allele_cat_tot[[i]])>0,na.rm=T))
for (l in 1:length(allele_cat_tot)) wild_results[sp,l]<-round(sum(alleles_cap[allele_cat_tot[[l]]]>0)/length(allele_cat_tot[[l]]),4)
wild_results[sp,10]<-n_ind_G
}
set_garden_p[sp]
table(Spp_tot_genind@pop)[1]
for (sp in 1:length(species_names)){
this_species<-species_names[sp]
setwd("G:\\My Drive\\Hoban_Lab_Docs\\Projects\\Ten_Oaks\\DataFiles\\genind_files\\garden_wild")
#setwd(paste("C:/Users/shoban/Dropbox/Projects/IN_PROGRESS/Oak_popgen_analyses/",this_species,sep=""))
#setwd(paste("/home/user/Dropbox/Projects/IN_PROGRESS/Oak_popgen_analyses/",this_species,sep=""))
Spp_tot_genind<-read.genepop(paste(this_species,"_wild_garden.gen",sep=""),ncode=3)
#This code compares the wild to various ex situ populations or all the ex situ merged
#Just put in garden and wild population numbers... currently all gardens are merged into one "population"
wild_p<-1; garden_p<-2
n_ind_W<-table(Spp_tot_genind@pop)[wild_p];  n_ind_G<-table(Spp_tot_genind@pop)[garden_p];
Spp_tot_genpop<-genind2genpop(Spp_tot_genind)
Spp_tot_genind_sep<-seppop(Spp_tot_genind)
alleles_cap<-colSums(Spp_tot_genind_sep[[garden_p]]@tab,na.rm=T)
#Allele categories based only on wild populations (can look at all wild pop'ns or only one if you want)
allele_cat_tot<-get.allele.cat(Spp_tot_genpop[wild_p], region_makeup_list[[sp]], 2, n_ind_W, glob_only=F,n_drop=n_to_drop)
#This goes through each allele category and divides the number captured ex situ (alleles_cap) by the number of alleles existing (allele_cat_tot)
list_allele_cat<-c("global","glob_v_com","glob_com","glob_lowfr","glob_rare","reg_rare","loc_com_d1","loc_com_d2","loc_rare")
for (i in 1:9) alleles_existing_by_sp[sp,i]<- (sum((allele_cat_tot[[i]])>0,na.rm=T))
for (l in 1:length(allele_cat_tot)) wild_results[sp,l]<-round(sum(alleles_cap[allele_cat_tot[[l]]]>0)/length(allele_cat_tot[[l]]),4)
wild_results[sp,10]<-n_ind_G
}
for (sp in 1:length(species_names)){
this_species<-species_names[sp]
setwd("G:\\My Drive\\Hoban_Lab_Docs\\Projects\\Ten_Oaks\\DataFiles\\genind_files\\garden_wild")
#setwd(paste("C:/Users/shoban/Dropbox/Projects/IN_PROGRESS/Oak_popgen_analyses/",this_species,sep=""))
#setwd(paste("/home/user/Dropbox/Projects/IN_PROGRESS/Oak_popgen_analyses/",this_species,sep=""))
Spp_tot_genind<-read.genepop(paste(this_species,"_wild_garden.gen",sep=""),ncode=3)
#This code compares the wild to various ex situ populations or all the ex situ merged
#Just put in garden and wild population numbers... currently all gardens are merged into one "population"
wild_p<-1; garden_p<-2
n_ind_W<-table(Spp_tot_genind@pop)[wild_p];  n_ind_G<-table(Spp_tot_genind@pop)[garden_p];
Spp_tot_genpop<-genind2genpop(Spp_tot_genind)
Spp_tot_genind_sep<-seppop(Spp_tot_genind)
alleles_cap<-colSums(Spp_tot_genind_sep[[garden_p]]@tab,na.rm=T)
#Allele categories based only on wild populations (can look at all wild pop'ns or only one if you want)
allele_cat_tot<-get.allele.cat(Spp_tot_genpop[wild_p], c(1:2), 2, n_ind_W)
#This goes through each allele category and divides the number captured ex situ (alleles_cap) by the number of alleles existing (allele_cat_tot)
list_allele_cat<-c("global","glob_v_com","glob_com","glob_lowfr","glob_rare","reg_rare","loc_com_d1","loc_com_d2","loc_rare")
for (i in 1:9) alleles_existing_by_sp[sp,i]<- (sum((allele_cat_tot[[i]])>0,na.rm=T))
for (l in 1:length(allele_cat_tot)) wild_results[sp,l]<-round(sum(alleles_cap[allele_cat_tot[[l]]]>0)/length(allele_cat_tot[[l]]),4)
wild_results[sp,10]<-n_ind_G
}
